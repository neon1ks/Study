--- osc.c	2014-08-10 17:38:38.520349657 +0900
+++ myosc.c	2014-08-10 17:51:03.568330000 +0900
@@ -1,6 +1,7 @@
 #include <gtk/gtk.h>
 #include <stdio.h>
 #include <math.h>
+#include <stdlib.h>
 //объявляем функцию, обработчик сигнала закрытия окна
 static void destroy(GtkWidget*, gpointer);
 //объявляем функцию, обработчки сигнала перерисовки окна
@@ -11,10 +12,13 @@
 gint count = 0, t = 0;
 double radianPerx = 2 * 3.14 / 90; //угол радиан, определяет расстояние между гребнями волн
 const double uAmplit = 900; //амплитуда синусоиды
+char *buf; //текстовый буфер для хранения текста метки
 
 //главная функция приложения
 int main(int argc, char* argv[])
 {
+	//Выделяем память для текстового буфера	
+	buf = calloc(256, sizeof(char));
 	//объявляем два виджета - окно и область для рисования
 	GtkWidget *window, *drawing;
 	//инициализируем gtk
@@ -38,22 +42,23 @@
 	//помещаем ее в контейнер окна
 	gtk_container_add(GTK_CONTAINER(window), drawing);
 	//связываем сигнал уничтожения окна и функцию-обработчик
-	g_signal_connect(GTK_OBJECT(window), "destroy", G_CALLBACK(destroy), NULL);
+	g_signal_connect(window, "destroy", G_CALLBACK(destroy), NULL);
 	//связываем сигнал перерисовки области рисования и функцию-обработчик
-	g_signal_connect(G_OBJECT(drawing), "expose_event", G_CALLBACK(draw), NULL);
+	g_signal_connect(drawing, "draw", G_CALLBACK(draw), NULL);
 	//показывем все виджеты
 	gtk_widget_show_all(window);
 	//запускаем главный цикл программы
 	gtk_main();
-	return 0;
+	//Освобождаем память у текстового буфера
+	free(buf);
+	return EXIT_SUCCESS;
 }
 
 static void draw(GtkWidget* drawarea, GdkEventExpose* event, gpointer data)
 {
 	int ya, xa; //переменные для хранения X и Y координат рисования
-	char *buf; //текстовый буфер для хранения текста метки
 	//создаем область для рисования Cairo
-	cairo_t *cr = gdk_cairo_create(drawarea->window);
+	cairo_t *cr = gdk_cairo_create(gtk_widget_get_window (drawarea));
 	//рисуем рамку, размером с область рисования
 	cairo_rectangle (cr, event->area.x, event->area.y, event->area.width, event->area.height);
 	//задаем толщину линии
@@ -128,12 +133,14 @@
 		t++;
 	}
 	cairo_stroke (cr);
+	//закрываем cr и освобождаем память
+	cairo_destroy(cr);
 }
 //функция-обработчик сигнала таймера
 static gboolean time_handler(GtkWidget* widget)
 {
 	//если передан нулевой параметр - возвращаем ложь
-	if (widget->window == NULL) return FALSE;
+	if (gtk_widget_get_window (widget) == NULL) return FALSE;
 	//увеличиваем значение переменной смещения графика
 	count++;
 	//обнуляем точку положения на графике
